{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl,\r\n"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl,"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "rw ← h,\r\nrefl,"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw add_succ,\r\nrw add_zero,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with d hd,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw hd,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd,\r\nrw add_zero,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw add_succ,\r\nrw add_succ,\r\nrw hd,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with d hd,\r\nrw add_zero,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw hd,\r\nrw add_succ,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with d hd,\r\nrw add_zero,\r\nrw zero_add,\r\nrefl,\r\nrw add_succ,\r\nrw succ_add,\r\nrw hd,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw add_succ,\r\nrw add_zero,\r\nrefl,"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm a,\r\nrw add_assoc,\r\nrw add_comm b,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with d hd,\r\nrw mul_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw add_zero,\r\nexact hd,"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw mul_succ,\r\nrw mul_zero,\r\nrw zero_add,\r\nrefl,"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "induction m with d hd,\r\nrw mul_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw hd,\r\nrw succ_eq_add_one,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction b with i hi,\r\nrw add_zero,\r\nrw mul_zero,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw mul_succ,\r\nrw hi,\r\nrw mul_succ,\r\nrw add_assoc,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with i hi,\r\nrepeat{ rw mul_zero },\r\nrepeat{ rw mul_succ },\r\nrw hi,\r\nrw mul_add,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with i hi,\r\nrepeat{ rw mul_zero },\r\nrw add_zero,\r\nrefl,\r\nrepeat{ rw mul_succ },\r\nrw add_right_comm,\r\nrw hi,\r\nrepeat{ rw add_succ },\r\nrw succ_add,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction a with i hi,\r\nrw zero_add,\r\nrw zero_mul,\r\nrw zero_add,\r\nrefl,\r\nrw succ_add,\r\nrw succ_mul,\r\nrw succ_mul,\r\nrw hi,\r\nrw add_right_comm,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with i hi,\r\nrw zero_mul,\r\nrw mul_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw succ_mul,\r\nrw hi,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "induction b with i hi,\r\nrepeat{ rw zero_mul },\r\nrepeat{ rw mul_zero },\r\nrw succ_mul,\r\nrw mul_add,\r\nrw hi,\r\nrw succ_mul,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rw pow_zero,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw pow_succ,\r\nrw mul_zero,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw pow_succ,\r\nrw pow_zero,\r\nrw one_mul,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with i hi,\r\nrw pow_zero,\r\nrefl,\r\nrw pow_succ,\r\nrw mul_one,\r\nrw hi,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with i hi,\r\nrw add_zero,\r\nrw pow_zero,\r\nrw mul_one,\r\nrefl,\r\nrw add_succ,\r\nrepeat { rw pow_succ },\r\nrw hi,\r\nrw mul_assoc,\r\nrefl,\r\n\r\n"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with i hi,\r\nrepeat { rw pow_zero },\r\nrw one_mul,\r\nrefl,\r\nrepeat { rw pow_succ },\r\nrw hi,\r\nsimp,\r\n"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with i hi,\r\nrw mul_zero,\r\nrepeat { rw pow_zero },\r\nrw mul_succ,\r\nrw pow_add,\r\nrw pow_succ,\r\nrw hi,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw two_eq_succ_one,\r\nrw one_eq_succ_zero,\r\nrepeat {rw pow_succ},\r\nrepeat {rw pow_zero},\r\nrepeat {rw one_mul},\r\nrepeat {rw succ_mul},\r\nrw zero_mul,\r\nrw zero_add,\r\nrw add_mul,\r\nrepeat {rw mul_add},\r\nrw add_mul,\r\nsimp,\r\n"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro n,\r\nexact 3*n + 2,\r\n"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),\r\nhave t := j(q),\r\nhave u := l(t),\r\nexact u,\r\n"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),\r\nhave t := j(q),\r\nhave u := l(t),\r\nexact u,\r\n"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intros p q,\r\nexact p,\r\n"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros pqr pq p,\r\n-- easter egg, valid because its enough to have p and q to get r\r\napply pqr,\r\nexact p,\r\nexact pq(p),\r\n"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intros pq qf p,\r\napply qf,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intros pq qe p,\r\napply qe,\r\napply pq,\r\nexact p,\r\n"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\napply f15,\r\napply f11,\r\napply f9,\r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact a,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),\r\n"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nexact p,\r\n"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),\r\nhave t := j(q),\r\nhave u := l(t),\r\nexact u,\r\n\r\n"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),\r\nhave t := j(q),\r\nhave u := l(t),\r\nexact u,\r\n\r\n"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intros p q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros pqr pq p,\r\napply pqr,\r\nexact p,\r\napply pq,\r\nexact p,\r\n"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros pq qr p,\r\napply qr,\r\napply pq,\r\nexact p,\r\n"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "repeat {rw not_iff_imp_false},\r\nintros pq q p,\r\napply q,\r\napply pq,\r\nexact p,\r\n"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "cc,\r\n"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact p,\r\nexact q,"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\ncases pq with p q,\r\nsplit,\r\nexact q,\r\nexact p,\r\n"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intros pq qr,\r\ncases pq with p q,\r\ncases qr with q r,\r\nsplit,\r\nexact p,\r\nexact r,\r\n"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intros peq qer,\r\ncases peq with pq qp,\r\ncases qer with qr rq,\r\nsplit,\r\nintro p,\r\napply qr,\r\napply pq,\r\nexact p,\r\nintro r,\r\napply qp,\r\napply rq,\r\nexact r,\r\n\r\n"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intros peq qer,\r\ncases peq with pq qp,\r\ncases qer with qr rq,\r\nsplit,\r\nintro p,\r\napply qr,\r\napply pq,\r\nexact p,\r\nintro r,\r\napply qp,\r\napply rq,\r\nexact r,\r\n\r\n"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro q,\r\nright,\r\nexact q,\r\n"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\ncases pq with p q,\r\nright,\r\nexact p,\r\nleft,\r\nexact q,\r\n\r\n"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,\r\nintro h,\r\ncases h with p qr,\r\ncases qr with q r,\r\nleft,\r\nsplit,\r\nexact p,\r\nexact q,\r\nright,\r\nsplit,\r\nexact p,\r\nexact r,\r\nintro h,\r\ncases h with pq pr,\r\ncases pq with p q,\r\nsplit,\r\nexact p,\r\nleft,\r\nexact q,\r\ncases pr with p r,\r\nsplit,\r\nexact p,\r\nright,\r\nexact r,\r\n"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nexfalso,\r\ncases h with p np,\r\napply np,\r\nexact p,\r\n"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "by_cases q : Q,\r\nby_cases p : P,\r\nintros h p,\r\nexact q,\r\nintros h p,\r\nexact q,\r\nintros h p,\r\nexfalso,\r\napply h,\r\nexact q,\r\nexact p,\r\n"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj,\r\nexact hs,\r\n"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj,\r\napply succ_inj,\r\nexact h,\r\n"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw h,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\nintro h,\r\napply succ_inj,\r\nexact h,\r\nintro h,\r\napply succ_eq_succ_of_eq,\r\nexact h,\r\n"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\napply succ_inj,\r\ninduction t with i hi,\r\nrepeat { rw add_zero at h},\r\napply succ_eq_succ_of_eq,\r\nexact h,\r\napply hi,\r\nrepeat { rw add_succ at h},\r\nhave q := succ_inj h,\r\nexact q,\r\n"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw [add_comm t a, add_comm t b] at h,\r\nexact add_right_cancel a t b h,\r\n"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact add_right_cancel a t b,\r\nintro h,\r\nrw h,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nexact add_left_cancel a b 0 h,\r\n"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "symmetry,\r\nexact zero_ne_succ a,\r\n"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b,\r\nrefl,\r\nrw add_succ at H,\r\nexfalso,\r\napply succ_ne_zero (a + b),\r\nexact H,\r\n"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw add_comm at h,\r\nexact add_left_eq_zero h,\r\n"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "symmetry,\r\nexact succ_eq_add_one d,\r\n"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "induction n with i hi,\r\n  exact zero_ne_succ 0,\r\n\r\n  intro h,\r\n  rw succ_eq_succ_iff i (succ i) at h,\r\n  apply hi,\r\n  exact h,\r\n  "
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "isSolved": true,
      "editorText": "intros not_a_zero not_b_zero,\r\ncases b,\r\n  rw mul_zero,\r\n  exact not_b_zero,\r\n\r\n  cases a,\r\n    rw [\r\n      mul_succ,\r\n      zero_mul,\r\n      add_zero\r\n    ],\r\n    exact not_a_zero,\r\n\r\n    rw [\r\n      mul_succ,\r\n      succ_mul,\r\n      add_assoc,\r\n      add_succ,\r\n      add_succ\r\n    ],\r\n    exact succ_ne_zero (a * b + (b + a)),\r\n    "
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b,\r\n  right,\r\n  refl,\r\n\r\n  cases a,\r\n    left,\r\n    refl,\r\n\r\n    right,\r\n    exfalso,\r\n    rw [\r\n      mul_succ,\r\n      add_succ\r\n    ] at h,\r\n    apply zero_ne_succ (succ a * b + a),\r\n    symmetry,\r\n    exact h,\r\n"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "split,\r\nintro h,\r\n  exact eq_zero_or_eq_zero_of_mul_eq_zero a b h,\r\n\r\nintro h,\r\n  cases h,\r\n    rw h,\r\n    rw zero_mul,\r\n    refl,\r\n\r\n    rw h,\r\n    rw mul_zero,\r\n    refl,\r\n  "
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd generalizing b,\r\n  rw mul_zero,\r\n  rw mul_eq_zero_iff,\r\n  intro h,\r\n  cases h,\r\n    exfalso,\r\n    apply ha,\r\n    exact h,\r\n\r\n    exact h,\r\n\r\n  intro hb,\r\n  cases b,\r\n    rw mul_zero at hb,\r\n    symmetry at hb,\r\n    rw mul_eq_zero_iff at hb,\r\n    cases hb,\r\n      exfalso,\r\n      apply ha,\r\n      exact hb,\r\n\r\n      symmetry,\r\n      exact hb,\r\n    \r\n    rw succ_eq_succ_iff,\r\n    rw [\r\n      mul_succ,\r\n      mul_succ,\r\n      add_right_cancel_iff\r\n    ] at hb,\r\n\r\n    have hdb := hd b,\r\n    apply hdb,\r\n    exact hb,"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "isSolved": true,
      "editorText": "use 1,\r\nrw add_comm,"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "isSolved": true,
      "editorText": "use 0,\r\nrefl,"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with c hc,\r\nrw hc,\r\nuse succ c,\r\nrefl,"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "isSolved": true,
      "editorText": "use a,\r\nrw add_comm,\r\nrefl,"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "isSolved": true,
      "editorText": "cases hab with c hc,\r\ncases hbc with d hd,\r\nrw hc at hd,\r\nrw hd,\r\nuse (c + d),\r\nrw add_assoc,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "isSolved": true,
      "editorText": "cases hab with c hc,\r\ncases hba with d hd,\r\nrw [\r\n  hc,\r\n  add_assoc\r\n] at hd,\r\nsymmetry at hd,\r\nhave h := eq_zero_of_add_right_eq_self hd,\r\nhave dz := add_left_eq_zero h,\r\nrw [\r\n  dz,\r\n  add_zero\r\n] at hd,\r\nrw hd at hc,\r\nsymmetry,\r\nexact hc,\r\n"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "isSolved": true,
      "editorText": "cases h with c hc,\r\nsymmetry at hc,\r\nexact add_right_eq_zero hc,\r\n"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "isSolved": true,
      "editorText": "cases h with c hc,\r\nrw hc,\r\nuse c,\r\nrw succ_add,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "isSolved": true,
      "editorText": "induction b with i hi,\r\n  right,\r\n  use a,\r\n  rw zero_add,\r\n  refl,\r\n\r\n  cases hi,\r\n    left,\r\n    cases hi with b hb,\r\n    rw hb,\r\n    use succ b,\r\n    rw add_succ,\r\n    refl,\r\n\r\n    cases hi with b hb,\r\n    cases b,\r\n      rw add_zero at hb,\r\n      rw hb,\r\n      left,\r\n      use succ 0,\r\n      rw add_succ,\r\n      rw add_zero,\r\n      refl,\r\n\r\n      rw add_succ at hb,\r\n      rw hb,\r\n      right,\r\n      use b,\r\n      rw succ_add,\r\n      refl,\r\n"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "isSolved": true,
      "editorText": "use succ 0,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "isSolved": true,
      "editorText": "intros a_le_b t,\r\ncases a_le_b with c hc,\r\nrw hc,\r\nuse c,\r\nrw add_comm a c,\r\nrw add_assoc,\r\nrw add_comm,\r\nrefl,"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with c hc,\r\nrw [\r\n  succ_add,\r\n  succ_eq_succ_iff\r\n] at hc,\r\nrw hc,\r\nuse c,\r\nrefl,\r\n\r\n"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "isSolved": true,
      "editorText": "induction a with i hi,\r\n  intro h,\r\n  cases h with b hb,\r\n  rw [\r\n    succ_add,\r\n    zero_add\r\n  ] at hb,\r\n  apply zero_ne_succ b,\r\n  exact hb,\r\n\r\n  intro h,\r\n  have q := le_of_succ_le_succ (succ i) i h,\r\n  apply hi,\r\n  exact q,\r\n"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "isSolved": true,
      "editorText": "cases h with c hc,\r\nrw hc,\r\nuse c,\r\nrw add_assoc,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with l r,\r\ncases l with c hc,\r\ncases c,\r\n  rw add_zero at hc,\r\n  rw hc at r,\r\n  exfalso,\r\n  apply r,\r\n  exact le_refl a,\r\n\r\n  rw add_succ at hc,\r\n  use c,\r\n  rw succ_add,\r\n  exact hc,"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with c hc,\r\nrw succ_add at hc,\r\nrw hc,\r\nsplit,\r\n  use succ c,\r\n  rw add_succ,\r\n  refl,\r\n\r\n  intro h,\r\n  have q := add_le_add_right h c,\r\n  cases q with d hd,\r\n  apply not_succ_le_self (a + c),\r\n  use c + d,\r\n  rw add_assoc at hd,\r\n  exact hd,\r\n"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "split,\r\n  intro h,\r\n  exact lt_aux_one a b h,\r\n\r\n  intro h,\r\n  exact lt_aux_two a b h,\r\n"
    }
  ]
}